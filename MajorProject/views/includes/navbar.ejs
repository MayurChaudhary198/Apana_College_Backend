<style>
    .search-btn {
        background-color: #fe424d;
        color: #fff;
        border-radius: 25px;
        padding: 0 1rem 0 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        border: none;
        height: 100%;
    }

    .search-btn:hover {
        background-color: #fe424d;
        color: #fff;
    }

    .search-btn i {
        display: inline;
        margin-right: 0.5rem;
    }

    .search-inp {
        border-radius: 25px;
        padding: 0.5rem 3rem 0.5rem 3rem;
        font-size: 1rem;
    }


    #suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        width: 76%;
        background: white;
        border: 1px solid #ddd;
        list-style: none;
        padding: 0;
        max-height: 222px;
        overflow-y: auto;
        z-index: 1000;
        display: none;
    }

    #suggestions.show {
        display: block;
    }

    #suggestions .dropdown-item {
        padding: 10px;
        cursor: pointer;
    }

    #suggestions .dropdown-item:hover {
        background-color: #f1f1f1;
    }
</style>

<nav class="navbar navbar-expand-md bg-body-light border-bottom sticky-top">
    <div class="container-fluid">
        <a class="navbar-brand" href="/listings"><i class="fa-regular fa-compass"></i></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link" href="/listings">Explore</a>

            </div>

            <div class="navbar-nav ms-auto">
                <form class="d-flex search-bar position-relative" role="search" action="/listings" method="GET">
                    <input class="form-control me-2 search-inp" id="searchBox" type="search"
                        placeholder="Search destinations" value="<%= typeof search !== 'undefined' ? search : '' %>"
                        name="search">
                    <ul id="suggestions" class="dropdown-menu"></ul>
                    <button class="btn search-btn" type="submit">
                        <i class="fa-solid fa-magnifying-glass"></i> Search
                    </button>
                </form>

            </div>

            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/listings/new">Add New listing</a>
                <% if(!currUser){ %>
                    <a class="nav-link" href="/signup"><b>Sign up</b></a>
                    <a class="nav-link" href="/login"><b>Log in</b></a>
                    <% } %>
                        <% if(currUser){ %>
                            <a class="nav-link" href="/logout"><b>Log out</b></a>
                            <% } %>
            </div>
        </div>
    </div>
</nav>


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const searchBox = document.getElementById("searchBox");
        const suggestionsList = document.getElementById("suggestions");

        searchBox.addEventListener("input", async () => {
            console.log("User typed:", searchBox.value);
            const query = searchBox.value.trim();

            if (query.length === 0) {
                suggestionsList.innerHTML = "";
                suggestionsList.classList.remove("show"); // Hide dropdown if empty
                return;
            }

            try {
                const res = await fetch(`/search?query=${query}`, { cache: "no-store" });
                const results = await res.json();



                if (results.length === 0) {
                    suggestionsList.innerHTML = "<li class='dropdown-item'>No results found</li>";
                } else {
                    suggestionsList.innerHTML = results
                        .map(item => `<li class="dropdown-item">${item.title},${item.location},${item.country}</li>`)
                        .join("");
                }

                suggestionsList.classList.add("show"); // Show dropdown
            } catch (error) {
                console.error("Error fetching search results:", error);
            }
        });

        // Allow clicking on a suggestion
        suggestionsList.addEventListener("click", (event) => {
            if (event.target.tagName === "LI") {
                searchBox.value = event.target.textContent;
                suggestionsList.innerHTML = "";
                suggestionsList.classList.remove("show");
            }
        });

        // Hide dropdown when clicking outside
        document.addEventListener("click", (event) => {
            if (!searchBox.contains(event.target) && !suggestionsList.contains(event.target)) {
                suggestionsList.classList.remove("show");
            }
        });

        let selectedIndex = -1;

        searchBox.addEventListener("keydown", (e) => {
            const items = document.querySelectorAll(".dropdown-item");
            if (items.length === 0) return;

            if (e.key === "ArrowDown") {
                selectedIndex = (selectedIndex + 1) % items.length;
            } else if (e.key === "ArrowUp") {
                selectedIndex = (selectedIndex - 1 + items.length) % items.length;
            } else if (e.key === "Enter") {
                if (selectedIndex >= 0) {
                    searchBox.value = items[selectedIndex].textContent;
                    suggestionsList.innerHTML = "";
                }
            }

            items.forEach((item, index) => {
                item.style.backgroundColor = index === selectedIndex ? "#f0f0f0" : "white";
            });
        });
    });
</script>